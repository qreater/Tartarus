name: CI

on:
  push:
    branches:
      - main

jobs:
  docs-push:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15.8-alpine3.19
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.TARTARUS_PAT }}
          fetch-depth: 0
      - uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Start Uvicorn Server in Background
        run: |
          cd backend
          pip install poetry
          poetry install --no-root
          nohup poetry run uvicorn main:app --host 0.0.0.0 --port 8000 &

      - name: Wait for Server to Start
        run: |
          MAX_RETRIES=5
          RETRY_INTERVAL=1
          
          for i in $(seq 1 $MAX_RETRIES); do
            if curl -s -f http://localhost:8000/health > /dev/null 2>&1; then
              echo "Server is healthy!"
              exit 0
            fi
            echo "Attempt $i/$MAX_RETRIES: Server not ready, waiting ${RETRY_INTERVAL}s..."
            sleep $RETRY_INTERVAL
          done
          
          echo "Error: Server failed to become healthy after $MAX_RETRIES attempts"
          curl -v http://localhost:8000/health
          exit 1
      
      - name: Fetch OpenAPI JSON
        run: curl http://localhost:8000/openapi.json -o openapi.json

      - name: Modify OpenAPI JSON
        run: |
          python - <<EOF
          import json
          with open("openapi.json", "r") as file:
              openapi_data = json.load(file)

          for path, methods in openapi_data.get("paths", {}).items():
              for method, details in methods.items():
                  if "description" in details:
                      del details["description"]

          openapi_data["servers"] = [
              {"url": "http://localhost:8000", "description": "Local development server"},
          ]

          with open("docs/api-reference/openapi.json", "w") as file:
              json.dump(openapi_data, file, indent=4)
          EOF

      - name: Deploy to pages branch
        run: |
          git checkout pages || git checkout -b pages
          git config user.name "${{ secrets.TARTARUS_USERNAME }}"
          git config user.email "${{ secrets.TARTARUS_EMAIL }}"
          git add docs/api-reference/openapi.json
          git commit -m "docs: introduce updates to openapi.json"
          git push origin pages --force